#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name:  MT79

on:
  repository_dispatch:
#  schedule:
#    - cron: 0 20 * * 2,4,6,0
  watch:
    types: started
    
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'

env:
  CONFIG_FILE: 100.config
  DIY_P1_SH: immortalwrt.sh
  DIY_P2_SH: diy-part2.sh
  DIY_P3_SH: diy-part3.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  REPO_URL1: https://github.com/immortalwrt/immortalwrt
  REPO_URL2: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_URL3: https://github.com/padavanonly/immortalwrt-mt798x-23.05
  REPO_BRANCH: master
  REPO_BRANCH2: openwrt-21.02
  REPO_BRANCH3: openwrt-23.05
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL1 -b $REPO_BRANCH3 openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


    - name: Install Feeds
      run: |
        cd openwrt
        echo "src-git mihomo https://github.com/morytyann/OpenWrt-mihomo.git;main" >> "feeds.conf.default"
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: softethervpn
      id: softethervpn
      run: |
        git clone https://github.com/lexin8/Actions-OpenWrt lexin8
        git clone https://github.com/hanwckf/immortalwrt-mt798x mtk
        cd openwrt/feeds/packages/net/
        rm -rf softethervpn*
        cp -r ~/work/Actions-OpenWrt/Actions-OpenWrt/lexin8/softethervpn .
        cp -r ~/work/Actions-OpenWrt/Actions-OpenWrt/lexin8/softethervpn5 .  

    - name: mtk
      id: mtk
      run: |
        cd openwrt/package/
        cp -r ~/work/Actions-OpenWrt/Actions-OpenWrt/mtk/package/mtk .
        
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
 
    
    - name: 下载 package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"

    - name: 搜索固件
      run: |
        cd openwrt/bin/
        find . -name "*squashfs*"
        
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/
        cd $(find . -name "*squashfs*"  | head -n 1 | xargs dirname)
        ls
        rm -rf packages
        # ls | grep -v combined | xargs rm
        # tar zcvf `date +%Y.%m.%d`_OpenWrt.tar.gz *img.gz
        find . -name "*ext4*" |xargs rm -rf
        tar czvf `date +%Y.%m.%d.%H`_OpenWrt.tar.gz config.buildinfo *.bin
        # ls | grep -v .gz | xargs rm
        ls | grep -v OpenWrt.tar.gz | xargs rm
        ls
        echo "::set-output name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
        
    - name: 上传到 directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ steps.compile.outputs.DEVICE_NAME }}_${{ steps.compile.outputs.FILE_DATE }}
        path: ${{ steps.organize.outputs.FIRMWARE }}
